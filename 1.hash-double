class Hashtable:
    def _init_(self,size):
        self.size = size
        self.table = [None] * self.size
        self.comparison = 0
    
    def hash_function(self,key):
        return key % self.size
    
    def hash_function2(self,key):
        return 1 + (key % (self.size -1))
    

    def linearProbing(self,key,):
        index = self.hash_function(key)
        start_idx = index
        
        while self.table[index] is not None: 
            if(self.table[index] == key ):
                print(f" Key {key} already exists !")
                return 
            print("Collision occured ! Using linear probing !")
            index = (index + 1) % self.size
            self.comparison += 1
            
            if index == start_idx:
                print("Cannot insert Hash table is full!")
                return 
        self.table[index] = key
        print(f"Key {key} inserted successfullyy!!! using linear probing")
    
    def doubleHashing(self,key):
        index = self.hash_function(key)
        step = self.hash_function2(key)
        i = 0

        while self.table[(index + i * step) % self.size]  is not None :
            i+=1
            if i == self.size:
                print("Hash Table is Full")
                return
        new_idx = (index + i*step) % self.size
        self.table[new_idx] = key
        print(f"Inserted key {key} at index {new_idx} successfullyy!! using double hashing")
    
    def search(self,key):
        index = self.hash_function(key)
        start_idx = index
        
        while self.table[index] is not None:
            if self.table[index] == key:
                print(f"Key {key} found at index {index}")
                return index
            index = (index + 1) % self.size
            self.comparison += 1
            if index == start_idx:
                break
        print(f"Key {key} not found!")
        return None
    
    def delete(self,key):
        index = self.search(key)
        if index is not None:
            self.table[index] = None
            print(f"Key {key} deleted successfully!")
        else:
            print(f"Cannot delete key not found !")
    
    def display(self):
        print("\n Hash Table : ")
        for index , key in enumerate(self.table):
            if key is not None: 
                print(f"Index {index} : {key}")
        
def main():

    m = int(input("Enter Size of Table : "))
    ht = Hashtable(m)
    
    while(True):
        print("\nMenu : ")
        print("1.Insert Value using Linear Probing")
        print("2.Insert Value using Double Hashing")
        print("3.Search Value")
        print("4.Delete Value")
        print("5.Print Value")
        print("6.Exit")
        ch = int(input("\nEnter Your Choice : "))

        if ch == 1:
            print("Enter Key to insert Using Linear Probing :")
            key = int(input("\nEnter Key: "))
            ht.linearProbing(key)
        elif ch == 2:
            print("\nEnter Key to insert using Double Hashing : ")
            key = int(input("Enter Key"))
            ht.doubleHashing(key)
        elif ch == 3:
            search_key = int(input("\nEnter key to search: "))
            ht.search(search_key)
        elif ch == 4:
            dele_key = int(input("Enter Key to delete : "))
            ht.delete(dele_key)
        elif ch == 5:
            ht.display()
        elif ch == 6:
            print("Exiting...")
            break
        else:
            print("Enter Valid Choice!")

main()
